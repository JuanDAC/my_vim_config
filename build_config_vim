#!/usr/bin/env bash
readonly PATH_HOME="${HOME}/"
readonly PATH_INIT="${HOME}/.config/vim/"
readonly PATH_SRC="${HOME}/.vim/src/"
readonly PATH_SRC_UTILS="${HOME}/.vim/src/utils/"
readonly PATH_SRC_SETTING_PLUGINS="${HOME}/.vim/src/setting_plugins/"
readonly TEMP_OUT="${HOME}/.temp_out_vim_install"
readonly TEMP_ERR="${HOME}/.temp_err_vim_install"
readonly VER_INFO="Version 1.1.0"
readonly HELP="
Usage: sudo ./build_config_vim [OPTION]...
  or:  ./build_config_vim [OPTION]...
  or:  sudo bash ./build_config_vim [OPTION]...
  or:  bash ./build_config_vim [OPTION]...

Set enviroment to nvim or vim.

Mandatory arguments to long options are mandatory for short options too.
  -U, --without-update           Install configuration whithout auto update.
  -P, --without-plugins          Install the configuration without Plug
                                 and plauguns.
  -V, --dev-mode                 Revome the all configuration
  -R, --remove-all               Revome the all configuration
  -S, --silent                   Never print run information.
  -s, --save-mode                Explain and ask for confirmation for each
                                 action.
  -r, --remove                   Remove only the modules from the vim
                                 configuration.
  -d, --dependencies             Show the dependencies it needs to work
                                 properly and the ones it will install.
  -t, --report[=FILE]            Details of the current state of the vim.
                                 configuration and optional save in a file
  -x, --user-interface           Show details and avanced whith terminal UI
  -i, --install                  Install in the like a exacutable.
  -a, --always-update            Upgrade the environment by installing/upgrading
                                 packages only when load a profile.
  -n, --normal-update            Upgrade the environment by installing/upgrading
                                 packages only when have change in the repo of
                                 the configuration.
  -u, --user=USER                Change the user in which it will be installed.
  -c, --change-dir=DIR           Change the installation directory to DIR.
  -f, --force                    Force install nvim.
  -h  --help                     Display this help and exit.
  -v  --version                  Output version information and exit.
  -m  --install-man-page         Install man of current.
  -D  --disable=packeges         Disable a module from the vim configuration.

Full documentation at: <https://github.com/JuanDAC/my_vim_config/tree/main/documentation>
"

dr=''
install=false
skip=false
for op in "$@";do
	if $skip; then
		skip=false;
		continue;
	fi
	case "$op" in
		-v|--version)
			echo "$VER_INFO"
			shift
			exit 0
			;;
		-h|--help)
			echo "$HELP"
			shift
			exit 0
			;;
		-dr|--doc-root)
			shift
			if [[ "$1" != "" ]]; then
				dr="${1/%\//}"
				shift
				skip=true
			else
				echo "E: Arg missing for -dr option"
				exit 1
			fi
			;;
		-i|--install)
			install=true
			shift
			;;
		-*)
			echo "E: Invalid option: $1"
			shift
			exit 1
			;;
	esac
done















SU=""
if [[ "$(whoami)" == "root" ]]; then
	SU="sudo"
fi

nvim --version 2> "$TEMP_ERR" 1> "$TEMP_OUT"

if [ "$(wc --lines -- "$TEMP_OUT")" -eq 0 ]; then
	$SU apt-get update
	$SU apt-get -y install neovim
	$SU apt-get -y install python-neovim
	$SU apt-get -y install python3-neovim 2> /dev/null 1> /dev/null
fi

nvim --version 2> "$TEMP_ERR" 1> "$TEMP_OUT"

if [ "$(wc --lines -- "$TEMP_OUT")" -eq 0 ]; then
	$SU apt update
	$SU apt -y install neovim
	$SU apt -y install python-neovim
	$SU apt -y install python3-neovim 2> /dev/null 1> /dev/null
fi

nvim --version 2> "$TEMP_ERR" 1> "$TEMP_OUT"

if [ "$(wc --lines -- "$TEMP_OUT")" -eq 0 ]; then
	curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage 2> /dev/null 1> /dev/null &
	chmod u+x nvim.appimage 2> /dev/null 1> /dev/null &
	./nvim.appimage --appimage-extract 2> /dev/null 1> /dev/null &
	./squashfs-root/AppRun --version 2> /dev/null 1> /dev/null &
	mv squashfs-root / && ln -s /squashfs-root/AppRun /usr/bin/nvim 2> /dev/null 1> /dev/null &
fi


readonly PATH_FILES=('events.vim' 'features.vim' 'index.vim' 'load_plugins.vim' \
'scheme.vim' 'settings.vim' 'variables.vim' 'mappings.vim' \
'setting_plugins/ale.vim' 'setting_plugins/coc.vim' 'setting_plugins/emmet.vim' \
'setting_plugins/index.vim' 'setting_plugins/nerd_tree.vim' \
'utils/index.vim' 'utils/string.vim')

rm -rf $PATH_SRC
rm -f "${PATH_HOME}.vimrc"
rm -f "${PATH_INIT}init.vim"

mkdir -p $PATH_HOME
mkdir -p $PATH_INIT
mkdir -p $PATH_SRC
mkdir -p $PATH_SRC_UTILS
mkdir -p $PATH_SRC_SETTING_PLUGINS

wget --no-verbose --directory-prefix=$PATH_INIT 'https://raw.githubusercontent.com/JuanDAC/my_vim_config/main/init.vim' &> /dev/null &
wget --no-verbose --directory-prefix=$PATH_HOME 'https://raw.githubusercontent.com/JuanDAC/my_vim_config/main/.vimrc' &> /dev/null &

for i in ${!PATH_FILES[@]}; do
	wget --no-verbose -O "${PATH_SRC}${PATH_FILES[$i]}" \
		"https://raw.githubusercontent.com/JuanDAC/my_vim_config/main/src/${PATH_FILES[$i]}" &> /dev/null &
done

touch ~/.my_vimrc

if [ "$(which nvim | wc --bytes)" -eq 0 ]; then
	if [ ! -f "~/.vim/autoload/plug.vim" ]; then
		curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
			https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim &> /dev/null &
	fi
else
	if [ ! -f "${XDG_DATA_HOME:-$HOME/.local/share}/nvim/site/autoload/plug.vim" ]; then
		sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
			https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim' &> /dev/null &
	fi
	
	if [ "$(cat ~/.bash_aliases | grep "vim='nvim'" | wc --bytes)" -ne 0 ]; then
		echo "alias vim='nvim';alias rm='rm -i'" >> ~/.bash_aliases
	elif [ ! -f ~/.bash_aliases ]; then
		echo "alias vim='nvim';alias rm='rm -i'" >> ~/.bash_aliases
	fi
fi

if [ "$(cat ~/.bashrc | grep "build_config_vim" | wc --bytes)" -ne 0 ]; then
	number="$(grep -n build_config_vim -- ~/.bashrc | cut --delimiter=':' --fields=1 | head -1)"
	if [ "$number" -ne 0 ]; then
		sed -i "${number}d" ~/.bashrc
	fi
fi

if [ "$(cat ~/.bashrc | grep "clear" | wc --bytes)" -ne 0 ]; then
	number="$(grep -n "clear" -- ~/.bashrc | cut --delimiter=':' --fields=1 | head -1)"
	if [ "$number" -ne 0 ]; then
		sed -i "${number}d" ~/.bashrc
	fi
fi

if [ "$(cat ~/.bashrc | grep "build_config_vim" | wc --bytes)" -eq 0 ]; then
	echo "wget --no-verbose -O - https://raw.githubusercontent.com/JuanDAC/my_vim_config/main/build_config_vim | bash &> /dev/null" >> ~/.bashrc
fi

if [ "$(cat ~/.bashrc | grep "clear" | wc --bytes)" -eq 0 ]; then
	echo "clear" >> ~/.bashrc
fi
